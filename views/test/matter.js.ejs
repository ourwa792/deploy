<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Matter.js Example</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.20.0/matter.min.js" integrity="sha512-6+7rTBmR6pRFe9fa0vCFjFaHZj/XYa7774bEBzRtxgdpIJOS++R3cKd6Prg/eJmxtsJotd8KAg4g57uuVQsZKA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <style>
        body {
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        #world {
            border: 2px solid #333;
        }
    </style>
</head>
<body>

    <canvas id="world"></canvas>

    <script>
    const { Engine, Render, Runner, Bodies, World, Constraint, Mouse, MouseConstraint, Composite } = Matter;

// إعداد المحرك والمشهد
const engine = Engine.create();
const render = Render.create({
    canvas: document.getElementById('world'),
    engine: engine,
    options: {
        width: 800,
        height: 600,
        wireframes: false,
        background: '#ffffff',
        showAngleIndicator: false
    }
});

// إنشاء العمود المركزي الثابت
//const centralColumn = Bodies.rectangle(400, 300, 20, 300, { isStatic: true, render: { fillStyle: '#333' } });

// إنشاء العارضة الأفقية
//const beam = Bodies.rectangle(400, 300, 400, 20, { render: { fillStyle: '#555' } });

// إنشاء الكفتين
//const leftPan = Bodies.rectangle(250, 350, 200, 20, { render: { fillStyle: '#999' } });
//const rightPan = Bodies.rectangle(550, 350, 200, 20, { render: { fillStyle: '#999' } });

// إضافة الكتل
const kgMass = Bodies.circle(250, 250, 30, { mass: 10, render: { fillStyle: '#FF5722' } });
const gMass = Bodies.circle(550, 250, 15, { mass: 0.01, render: { fillStyle: '#4CAF50' } });

/* // إنشاء المفصل لربط العارضة مع العمود المركزي بحيث تكون العارضة قابلة للدوران
const beamConstraint = Constraint.create({
    bodyA: beam,
    pointA: { x: 0, y: 0 },
    bodyB: centralColumn,
    pointB: { x: 0, y: 0 },
    stiffness: 0.9,
    length: 0
});

// ربط العارضة بالكفتين
const leftPanConstraint = Constraint.create({
    bodyA: beam,
    pointA: { x: -150, y: 0 },
    bodyB: leftPan,
    pointB: { x: 0, y: 0 },
    stiffness: 0.9,
    length: 0
});

const rightPanConstraint = Constraint.create({
    bodyA: beam,
    pointA: { x: 150, y: 0 },
    bodyB: rightPan,
    pointB: { x: 0, y: 0 },
    stiffness: 0.9,
    length: 0
});

// ربط الكتل بالكفتين
const leftMassConstraint = Constraint.create({
    bodyA: kgMass,
    pointA: { x: 0, y: 0 },
    bodyB: leftPan,
    pointB: { x: 0, y: -30 },
    stiffness: 1,
    length: 0
});

const rightMassConstraint = Constraint.create({
    bodyA: gMass,
    pointA: { x: 0, y: 0 },
    bodyB: rightPan,
    pointB: { x: 0, y: -30 },
    stiffness: 1,
    length: 0
}); */

// إضافة الأجسام والمفاصل إلى العالم
//World.add(engine.world, [centralColumn, beam, leftPan, rightPan, kgMass, gMass, beamConstraint, leftPanConstraint, rightPanConstraint, leftMassConstraint, rightMassConstraint]);
World.add(engine.world, [kgMass, gMass]);

// إضافة التحكم بالماوس
const mouse = Mouse.create(render.canvas);
const mouseConstraint = MouseConstraint.create(engine, {
    mouse: mouse,
    constraint: {
        render: { visible: false }
    }
});

World.add(engine.world, mouseConstraint);

render.mouse = mouse;

/* // إضافة التسميات على الكتل
function addLabels() {
    const context = render.context;
    context.font = "20px Arial";
    context.fillStyle = "black";
    context.fillText("1 kg", kgMass.position.x - 20, kgMass.position.y - 40);
    context.fillText("1 g", gMass.position.x - 15, gMass.position.y - 40);
} */

// تشغيل المحرك والمشهد
const runner = Runner.create();
Runner.run(runner, engine);
Render.run(render);

// تحديث التسميات باستمرار
Matter.Events.on(render, "afterRender", function() {
    addLabels();
});
</script>
</body>
</html> -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mass Conversion Simulation</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
        }
        canvas {
            display: block;
        }
        #info {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
        }
        #tutorial {
            position: absolute;
            top: 10px;
            right: 10px;
            color: white;
        }
    </style>
</head>
<body>
    <div id="info">Click on an object to see its mass in different units</div>
    <div id="tutorial">Drag objects to see how they interact</div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.17.1/matter.min.js"></script>
    <script>
        // Matter.js module aliases
        const { Engine, Render, Runner, Bodies, Composite, World, Mouse, MouseConstraint, Events } = Matter;

        // Create an engine
        const engine = Engine.create();
        const { world } = engine;

        // Create a renderer
        const render = Render.create({
            element: document.body,
            engine: engine,
            options: {
                width: window.innerWidth,
                height: window.innerHeight,
                wireframes: false
            }
        });

        // Create bodies with different masses
        const masses = {
            milligram: 0.000001,
            gram: 0.001,
            kilogram: 1,
            ton: 1000,
            pound: 0.453592,
            ounce: 0.0283495
        };

        const bodies = Object.keys(masses).map((unit, index) => Bodies.circle(200 + index * 100, 100, 20 + index * 5, {
            mass: masses[unit],
            render: {
                fillStyle: ['blue', 'green', 'red', 'yellow', 'purple', 'orange'][index]
            }
        }));

        // Create a ground
        const ground = Bodies.rectangle(window.innerWidth / 2, window.innerHeight - 50, window.innerWidth, 100, {
            isStatic: true,
            render: {
                fillStyle: 'brown'
            }
        });

        // Add all of the bodies to the world
        Composite.add(world, [...bodies, ground]);

        // Add mouse control
        const mouse = Mouse.create(render.canvas);
        const mouseConstraint = MouseConstraint.create(engine, {
            mouse: mouse,
            constraint: {
                stiffness: 0.2,
                render: {
                    visible: false
                }
            }
        });

        Composite.add(world, mouseConstraint);

        // Keep the mouse in sync with rendering
        render.mouse = mouse;

        // Display mass information on click
        Events.on(mouseConstraint, 'startdrag', event => {
            const body = event.body;
            if (body) {
                const mass = body.mass;
                const massInfo = Object.keys(masses).map(unit => {
                    const unitMass = mass / masses[unit];
                    return `${unitMass.toFixed(6)} ${unit}`;
                }).join('<br>');
                document.getElementById('info').innerHTML = `
                    Mass: ${mass} kg<br>
                    ${massInfo}
                `;
            }
        });

        // Run the renderer
        Render.run(render);

        // Create a runner
        const runner = Runner.create();

        // Run the engine
        Runner.run(runner, engine);
    </script>
</body>
</html>